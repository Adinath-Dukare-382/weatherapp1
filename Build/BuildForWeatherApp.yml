trigger:
  branches:
    include:
      - development
      - master
  paths:
    include:
     - source/*
    exclude:
      - Build/*
      - Infra/*
      - Deploy/*
pr:
  branches:
    include:
      - development
      - master
  paths:
    include:
     - source/*
    exclude:
      - Build/*
      - Infra/*
      - Deploy/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/HelloWorld.sln'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Run Nuget Restore'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: Pack - '$(solution)'
  inputs:
    command: 'pack'
    packagesToPack: '**/$(solution)'
    configuration: 'Release'
    packDirectory: '$(Build.ArtifactStagingDirectory)\Nuget'
    nobuild: true
    versioningScheme: 'off'

- task: PublishBuildArtifacts@1
  displayName: Publish NuGet Artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Nuget'
    ArtifactName: 'Packages'
    publishLocation: 'Container'
- task: DotNetCoreCLI@2
  displayName: Publish Solution
  inputs:
    command: 'publish'
    publishWebProjects: true
    projects: $(solution)
    arguments: '--configuration Release /p:DebugType=None /p:DebugSymbols=false --output $(Build.SourcesDirectory)\Build\zip\weatherapp -v d'
    modifyOutputPath: false
    zipAfterPublish: true
    workingDirectory: '$(Build.SourcesDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish zip file
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\Build\zip\weatherapp'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish zip file
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\source\*.nupkg'
    ArtifactName: 'packages'
    publishLocation: 'Container'

- task: PowerShell@2
  displayName: 'trigger for relase pipeline'
  inputs:
    targetType: 'inline'
    script: 'Write-Host ""#vso[build.addbuildtag]trigger"'
  condition: and(succeeded(),in(variables['Build.reason'],'IndividualCI','PullRequest'))

# - task: NuGetCommand@2
#   enabled: true
#   displayName: Push Nuget to Azure feed
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.config'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: '1b38962d-9be0-4287-a101-a6420bcafb67'
#   condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))  
  
- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '8357f20d-ec6e-46c1-9757-15be033d6919/d6dfe61d-0dd3-4f1a-9790-82c6e413eab3'